import object salsa_lite.runtime.StageService;
behavior Sieve2{
   long[] localPrimes;
   int maxLocalPrimes;
   int localPrimeCount;
   int nStages;
   int myStage;
   Sieve2 next; 
   Sieve2(int b, long startingPrime, int myStage,int s){
      localPrimes = new long[b];
      localPrimes[0]= startingPrime;
      localPrimeCount=1;
      maxLocalPrimes=b;
      next=null;
      self.myStage=myStage;
      nStages=s;
   }
   Sieve2(String[] args){
      long n=Long.parseLong(args[0]);
      int b=Integer.parseInt(args[1]);
      int s=Integer.parseInt(args[2]);
      //System.out.println("2 is prime");
      long j=new Long(2);
      Sieve2 firstFilter= new Sieve2 (b,j,0,s) on (0);
      for(long i=new Long(3); i<n;i+=2){
         firstFilter <- process(i); 
      }
      j=new Long(0);
      firstFilter<-exit(j);
   }
   ack process(long i){
      boolean isPrime=true;
      for (int x=0; x < localPrimeCount; x++) {
         long remainder = i % (localPrimes[x]);
         if (remainder == 0) {
            isPrime= false;
            break;
         }
      }
      if(isPrime){ 
         if(next!=null){
            next<-process(i);
         }
         else{
            //System.out.println(i +" is prime");
            if (localPrimeCount < maxLocalPrimes) {
               localPrimes[localPrimeCount] = i;
               localPrimeCount += 1;
            }
            else {
               if(myStage!=nStages-1){
                  next = new Sieve2(maxLocalPrimes,i,myStage+1,nStages) on (myStage+1);
               }
               else{
                  next = new Sieve2(maxLocalPrimes,i,0,nStages) on (0);
               }
            }
         }
      }
   }
   ack exit(long i){
      if(next!=null){
         next<-exit(i+1);
      }
      else{
         long total = (i * maxLocalPrimes) + localPrimeCount;
         //System.out.println(total +" primes found.");
         System.exit(0);
      } 
   }
   ack printCount(long count){
      System.out.println(count);
   }
}
