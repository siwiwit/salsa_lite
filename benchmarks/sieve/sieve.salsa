behavior Sieve{
   int[] localPrimes;
   int maxLocalPrimes;
   int localPrimeCount;
   Sieve next; 
   Sieve(int b, int startingPrime){
      localPrimes = new int[b];
      localPrimes[0]= startingPrime;
      localPrimeCount=1;
      maxLocalPrimes=b;
      next=null;
   }
   Sieve(String[] args){
      int n=Integer.parseInt(args[0]);
      int b=Integer.parseInt(args[1]);
      System.out.println("2 is prime");
      Sieve firstFilter= new Sieve (b,2);
      for(int i=3; i<n;i+=2){
         firstFilter <- process(i); 
      }
      firstFilter<-exit(0);
   }
   ack process(int i){
      boolean isPrime=true;
      for (int x = 0; x < localPrimeCount; x++) {
         int remainder = i % (localPrimes[x]);
         if (remainder == 0) {
            isPrime= false;
            break;
         }
      }
      if(isPrime){ 
         if(next!=null){
            next<-process(i);
         }
         else{
            System.out.println(i +" is prime");
            if (localPrimeCount < maxLocalPrimes) {
               localPrimes[localPrimeCount] = i;
               localPrimeCount += 1;
            }
            else {
               next = new Sieve(maxLocalPrimes,i);
            }
         }
      }
   }
   ack exit(int i){
      if(next!=null){
         next<-exit(i+1);
      }
      else{
         int total = (i * maxLocalPrimes) + localPrimeCount;
         System.out.println(total +" primes found.");
         System.exit(0);
      } 
   }
   ack printCount(int count){
      System.out.println(count);
   }
}
