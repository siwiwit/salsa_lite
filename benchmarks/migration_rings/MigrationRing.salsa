import salsa_lite.runtime.wwc.NameServer;
import salsa_lite.runtime.io.StandardOutput;
import salsa_lite.language.JoinDirector;

import object java.io.BufferedReader;
import object java.io.FileReader;
import object java.util.StringTokenizer;
import object java.util.ArrayList;

behavior MigrationRing extends RemoteActor {
    int number_workers;
    int number_migrations;

	ArrayList<String> hosts = new ArrayList<String>();
	ArrayList<Integer> ports = new ArrayList<Integer>();
	NameServer nameserver;

	MigrationRing(String[] args) {
		if (args.length != 3) {
			System.err.println("Incorrect arguments.");
			System.err.println("Usage:");
			System.err.println("\tjava MigrationRing <theaters file> <number_workers> <number_migrations>");
			System.exit(0);
		}

		number_workers = Integer.parseInt(args[1]);
		number_migrations = Integer.parseInt(args[2]);

        nameserver = new NameServer() called ("nameserver");

		self<-getTheaters(args[0]) @
		self<-create_actors(number_workers);

	}

    ack worker_finished() {
        number_workers--;

        System.out.println(number_workers + " remaining!");

        if (number_workers == 0) {
            System.err.println("Finished!");
            System.exit(0);
        }
    }

	ack getTheaters(String theater_file) {
		try {   
			BufferedReader in = new BufferedReader(new FileReader(theater_file));
			String line;

			while ((line = in.readLine()) != null) {
                StringTokenizer st = new StringTokenizer(line, ":");

				hosts.add(st.nextToken());
                ports.add(Integer.parseInt(st.nextToken()));
			}
		} catch (Exception e) {
			System.err.println("Error reading theaters file: " + e);
			e.printStackTrace();
            System.exit(0);
		}       
	}        

	ack create_actors(int number_workers) {
		for (int i = 0; i < number_workers; i++) {
			int target = (int)(hosts.size() * Math.random());

            MigrationRingWorker w = new MigrationRingWorker(self, i, number_migrations, hosts, ports) called ("worker_" + i) using (nameserver);
		}
	}
}
