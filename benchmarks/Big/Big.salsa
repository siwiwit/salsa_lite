module salsa_lite.benchmarks.Big;
import salsa_lite.language.JoinDirector;

behavior Big {
    int n_others;
    int id;
    Big[] others;
    Big source;
    JoinDirector jd_runner;
    Big (int id, Big source,int n) {
        self.id = id;
        self.source = source;
        if(n!=0){
           others=new Big[n];
        }
    }
    Big(String[] args){
        JoinDirector j=new JoinDirector();
        int p = Integer.parseInt(args[1]);
        int n = Integer.parseInt(args[0]);
        self<-Big(n,p,j);
        j<-resolveAfter(1)@ 
        self<-exit();
    }
    ack Big(int n,int p, JoinDirector j) {
        Big [] actors = new Big[p];
        self.jd_runner=j;
        n_others = p;

        for (int i = 0; i < p; i++) {
            actors[i] = new Big(i, self,p);
        }

        JoinDirector jd = new JoinDirector();

        for (int i = 0; i < p; i++) {
           for(int u=0;u<p;u++){
              actors[i]<-setOther(actors[u],u) @ jd<-join();
           }
        }
        p=p*p;
        jd<-resolveAfter(p)@
        self<-sendMessages(n,actors);
        }
    ack sendMessages(int n,Big[] actors){
      for(int i=0;i<actors.length;i++){
         actors[i] <-send(n);
      }
    }
    ack setOther(Big other,int place) {
      others[place]=other; 
    }

    ack send(int number){
        int rNumber = (int)(Math.random() * others.length);
        others[rNumber]<-pingMessage(self.id, number);
    }

    ack pongMessage(int id, int number) {
        //System.out.println(self.id + ": Pong message from " + id + ", number: " + number);
        number--;
        if (number > 0) {
            int rNumber = (int)(Math.random() * others.length);
            others[rNumber]<-pingMessage(self.id, number);
        } else {
            source<-finished();
        }
    }

    ack pingMessage(int id, int number) {
        //System.out.println(self.id + ": Ping message from " + id + ", number: " + number);
        others[id]<-pongMessage(self.id, number);
    }

    ack finished() {
        n_others--;
        if (n_others == 0) {
           jd_runner<-join();
        }
    }
    ack exit(){
       System.exit(0);
    }

}
