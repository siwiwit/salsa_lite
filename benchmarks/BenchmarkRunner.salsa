//Import all benchmarks
import salsa_lite.benchmarks.PingPong.PingPong;
import salsa_lite.benchmarks.Big.Big;
import salsa_lite.benchmarks.barber.Barber;
import salsa_lite.benchmarks.pi.piCompMaster;
import salsa_lite.benchmarks.Trapezoid.TrapezoidMaster;
import salsa_lite.benchmarks.fibonacci.Fibonacci;
import salsa_lite.benchmarks.sieve.Sieve;
import salsa_lite.benchmarks.ForkJoinThroughPut.ForkJoinThroughPut;
import salsa_lite.benchmarks.ForkJoinActorCreation.ForkJoinActorCreation;
import salsa_lite.benchmarks.cigsmok.Arbiter;
import salsa_lite.benchmarks.CountingActor.CountingActor;


//Import other stuff 
import salsa_lite.language.JoinDirector;
import object java.util.Scanner;
import object java.io.BufferedWriter;
import object java.io.File;
import object java.io.FileWriter;
import object java.io.IOException;
import object java.util.ArrayList; 
behavior BenchmarkRunner{
    JoinDirector jd;
    ArrayList<Double> resultList;
    long numberOfRuns=new Long(10);
    long startTime=new Long(0);
    long endTime=new Long(0);
    long m= new Long(0);
    String[] parameter;
    String benchmarkName;
    int nstages=1;
    double sumTime=0.0;
    String outFileName="BenchmarkResults.csv";
    BenchmarkRunner(String[] args){
       resultList=new ArrayList<Double>();
       int n=0;
       if(System.getProperty("nstages")!= null){
          nstages= Integer.parseInt(System.getProperty("nstages"));
       }
       if(args.length==0){
          System.out.println("Runner usage java bechmarkRunner <name of bechmark> <parmeters>");
          System.exit(0);
       }
       benchmarkName= args[0];
       parameter = new String[args.length-1];
       for (int x=1;x<args.length;x++){
          parameter[x-1]=args[x];
       }
       switch (benchmarkName){
       case "PingPong" : 
            if(parameter.length!=1){ 
               System.out.println("PingPong usage java bechmarkRunner PingPong <number of pings>");
               System.exit(0);
            }
            else{
               self<-runBenchmarkPingPong(numberOfRuns);
            }
            break;
      case "Big" :  
            if(parameter.length!=2){
               System.out.println("Big usage java bechmarkRunner Big <number of pings> <number of actors>");
               System.exit(0);
            }
            else{
               self<-runBenchmarkBig(numberOfRuns);
            }
            break;
       case "Barber" :  
            if(parameter.length!=2){
               System.out.println("Barber usage java bechmarkRunner Barber <number of chairs> <number of customers>");
               System.exit(0); 
            }
            else{
               self<-runBenchmarkBarber(numberOfRuns);
            }
            break;
       case "PiComp" :  
            if(parameter.length!=2){
               System.out.println("PiComp usage java bechmarkRunner PiComp <number of workers> <Presision of Pi>");
               System.exit(0); 
            }
            else{
               self<-runBenchmarkPi(numberOfRuns);
            }
            break;
       case "Trapezoid" :  
            if(parameter.length!=4){
               System.out.println("Trapezoid usage java bechmarkRunner Trapezoid <left endpoint> <right endpoint> <number of trapezoids> <number of actors>");
               System.exit(0); 
            }
            else{
               self<-runBenchmarkTrapezoid(numberOfRuns);
            }
            break;
       case "Fibonacci" :  
            if(parameter.length!=1){
               System.out.println("Fibonacci usage java bechmarkRunner Fibonacci <n>");
               System.exit(0); 
            }
            else{
               self<-runBenchmarkFibonacci(numberOfRuns);
            }
            break;
       case "Sieve" :  
            if(parameter.length!=2){
               System.out.println("Sieve usage java bechmarkRunner Sieve <max primes per actor> <Primes under>");
               System.exit(0); 
            }
            else{
               self<-runBenchmarkSieve(numberOfRuns);
            }
            break;
       case "CigSmoke" :  
            if(parameter.length!=2){
               System.out.println("CigSmoke usage java bechmarkRunner CigSmoke <number of actors> <number of rounds>");
               System.exit(0); 
            }
            else{
               self<-runBenchmarkCigSmoke(numberOfRuns);
            }
            break;
       case "ForkJoinThroughPut" :  
            if(parameter.length!=2){
               System.out.println("ForkJoinThroughPut usage java bechmarkRunner ForkJoinThroughPut <number of actors> <number of messages>");
               System.exit(0); 
            }
            else{
               self<-runBenchmarkForkJoinThroughPut(numberOfRuns);
            }
            break;
       case "ForkJoinActorCreation" :  
            if(parameter.length!=1){
               System.out.println("ForkJoinActorCreation usage java bechmarkRunner ForkJoinActorCreation <number of actors>");
               System.exit(0); 
            }
            else{
               self<-runBenchmarkForkJoinActorCreation(numberOfRuns);
            }
            break;
       default: 
                //SALSA Compiler issue after default the ';' is removed by the SALSA compiler so java will not compile break is the only option
                break;
       }
   }
   ack start(){
      startTime=System.nanoTime();
   }
   ack end(){
      endTime=System.nanoTime();
      double totalTime = (endTime - startTime) / 1e6;
      sumTime+=totalTime;
      System.out.println(totalTime);
      resultList.add(totalTime);
   }
   ack finished(){
     for(Double i: resultList){
     
     }
     try{
         File file = new File(outFileName);
         FileWriter fw = new FileWriter(file.getAbsoluteFile(),true);
         BufferedWriter bw = new BufferedWriter(fw);
         bw.write(benchmarkName+" on "+ nstages+ " stages ");
         for(int x=0;x<parameter.length;x++){
            bw.write("<"+parameter[x]+">");
         }
         bw.write( "Avg Time: " + sumTime/numberOfRuns +"\n");
         bw.close();
      }catch(IOException e){

      }
      sumTime=0;
   }
   ack exit(){
      System.exit(0);
   }


   ack runBenchmarkBarber(long x){
      if(x>0){
         jd=new JoinDirector();
         Barber benchmark =new Barber() on (0);
         self<-start()@
         benchmark<-Barber(Integer.parseInt(parameter[0]),Integer.parseInt(parameter[1]),jd);
         jd<-resolveAfter(1)@
        self<-end()@
         self<-runBenchmarkBarber(x-1);
      }
      else{
         self<-finished()@
         self<-exit();
      }
   }
   ack runBenchmarkBig(long x){
      if(x>0){
         jd=new JoinDirector();
         Big benchmark =new Big(1,null) on (0);
         self<-start()@
         benchmark<-Big(Integer.parseInt(parameter[0]),Integer.parseInt(parameter[1]),jd);
         jd<-resolveAfter(1)@
         self<-end()@
         self<-runBenchmarkBig(x-1);
      }
      else{
         self<-finished()@
         self<-exit();
      }
   }
   ack runBenchmarkPingPong(long x){
      if(x>0){
         jd=new JoinDirector();
         PingPong benchmark =new PingPong(1) on (0);
         self<-start()@
         benchmark<-PingPong(Long.parseLong(parameter[0]),jd);
         jd<-resolveAfter(1)@
         self<-end()@
         self<-runBenchmarkPingPong(x-1);
      }
      else{
         self<-finished()@
         self<-exit();
      }
   }
   ack runBenchmarkPi(long x){
      if(x>0){
         jd=new JoinDirector();
         piCompMaster benchmark =new piCompMaster() on (0);
         self<-start()@
         benchmark<-piCompMaster(Integer.parseInt(parameter[0]),Integer.parseInt(parameter[1]),jd);
         jd<-resolveAfter(1)@
         self<-end()@
         self<-runBenchmarkPi(x-1);
      }
      else{
         self<-finished()@
         self<-exit();
      }
   }
   ack runBenchmarkTrapezoid(long x){
      if(x>0){
         jd=new JoinDirector();
         TrapezoidMaster benchmark =new TrapezoidMaster() on (0);
         self<-start()@
         benchmark<-Trapezoid(Double.parseDouble(parameter[0]),Double.parseDouble(parameter[1]),Integer.parseInt(parameter[2]),Integer.parseInt(parameter[3]),jd);
         jd<-resolveAfter(1)@
         self<-end()@
         self<-runBenchmarkPi(x-1);
      }
      else{
         self<-finished()@
         self<-exit();
      }
   }
   ack runBenchmarkFibonacci(long x){
      if(x>0){
         jd=new JoinDirector();
         Fibonacci benchmark =new Fibonacci(Integer.parseInt(parameter[0])) on (0);
         self<-start()@
         benchmark<-finish(benchmark<-compute())@
         self<-end()@
         self<-runBenchmarkPi(x-1);
      }
      else{
         self<-finished()@
         self<-exit();
      }
   }
   ack runBenchmarkSieve(long x){
      if(x>0){
         jd=new JoinDirector();
         Sieve benchmark =new Sieve() on (0);
         self<-start()@
         benchmark<-Sieve(Long.parseLong(parameter[0]),Integer.parseInt(parameter[1]),jd);
         jd<-resolveAfter(1)@
         self<-end()@
         self<-runBenchmarkPi(x-1);
      }
      else{
         self<-finished()@
         self<-exit();
      }
   }
   ack runBenchmarkCigSmoke(long x){
      if(x>0){
         jd=new JoinDirector();
         Arbiter benchmark =new Arbiter() on (0);
         self<-start()@
         benchmark<-CigSmoker(Integer.parseInt(parameter[0]),Integer.parseInt(parameter[1]),jd);
         jd<-resolveAfter(1)@
         self<-end()@
         self<-runBenchmarkPi(x-1);
      }
      else{
         self<-finished()@
         self<-exit();
      }
   }
   ack runBenchmarkForkJoinThroughPut(long x){
      if(x>0){
         jd=new JoinDirector();
         ForkJoinThroughPut benchmark =new ForkJoinThroughPut() on (0);
         self<-start()@
         benchmark<-ForkJoinThroughPut(Integer.parseInt(parameter[0]),Integer.parseInt(parameter[1]),jd);
         jd<-resolveAfter(1)@
         self<-end()@
         self<-runBenchmarkPi(x-1);
      }
      else{
         self<-finished()@
         self<-exit();
      }
   }
   ack runBenchmarkForkJoinActorCreation(long x){
      if(x>0){
         jd=new JoinDirector();
         ForkJoinActorCreation benchmark =new ForkJoinActorCreation() on (0);
         self<-start()@
         benchmark<-ForkJoinActorCreation(Integer.parseInt(parameter[0]),jd);
         jd<-resolveAfter(1)@
         self<-end()@
         self<-runBenchmarkPi(x-1);
      }
      else{
         self<-finished()@
         self<-exit();
      }
   }

}



