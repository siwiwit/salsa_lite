module salsa_lite.runtime.wwc;

import object java.net.Socket;
import object java.io.IOException;
import object java.io.BufferedInputStream;
import object java.io.ObjectInputStream;
import object salsa_lite.runtime.MobileActorRegistry;

behavior IncomingTheaterConnection implements StagedActor {

    Socket socket = null;
    ObjectInputStream in = null;

    String sourceHost;
    int sourcePort;

    IncomingTheaterConnection(Socket socket) {
        self.socket = socket;
        try {
            in = new ObjectInputStream(new BufferedInputStream(socket.getInputStream()));
//            in = new ObjectInputStream(socket.getInputStream());

            sourceHost = socket.getInetAddress().getHostAddress();
            sourcePort = socket.getPort();

            System.err.println("made new incoming theater connection from: " + sourceHost + ":" + sourcePort);
        } catch (IOException ioe) {
            StringBuffer sb = new StringBuffer();
            sb.append("Error in IncomingTheaterConnection, IOException: " + ioe + "\n");
            sb.append("\tlocal host [" + socket.getLocalSocketAddress() + "], local port [" + socket.getLocalPort() + "]\n");
            sb.append("\tremote host address [" + socket.getInetAddress().getHostAddress() + "], remote host name [" + socket.getInetAddress().getHostName() + "], remote port [" + socket.getPort() + "]\n");
            for (StackTraceElement ste : ioe.getStackTrace()) {
                sb.append("\t\t" + ste.toString() + "\n");
            }
            System.err.println(sb.toString());
            pass;
        }

        self<-listen();
    }

    ack listen() {
        Object o = null;

        try {
            o = in.readObject();
//            in.reset();
        } catch (IOException ioe) {
            StringBuffer sb = new StringBuffer();
            sb.append("Error in IncomingTheaterConnection, IOException: " + ioe + "\n");
            sb.append("\tlocal host [" + socket.getLocalSocketAddress() + "], local port [" + socket.getLocalPort() + "]\n");
            sb.append("\tremote host address [" + socket.getInetAddress().getHostAddress() + "], remote host name [" + socket.getInetAddress().getHostName() + "], remote port [" + socket.getPort() + "]\n");
            for (StackTraceElement ste : ioe.getStackTrace()) {
                sb.append("\t\t" + ste.toString() + "\n");
            }
            System.err.println(sb.toString());
            pass;

        } catch (ClassNotFoundException cnfe) {
            StringBuffer sb = new StringBuffer();
            sb.append("Error in IncomingTheaterConnection, ClassNotFoundException: " + cnfe + "\n");
            sb.append("\tlocal host [" + socket.getLocalSocketAddress() + "], local port [" + socket.getLocalPort() + "]\n");
            sb.append("\tremote host address [" + socket.getInetAddress().getHostAddress() + "], remote host name [" + socket.getInetAddress().getHostName() + "], remote port [" + socket.getPort() + "]\n");
            for (StackTraceElement ste : cnfe.getStackTrace()) {
                sb.append("\t\t" + ste.toString() + "\n");
            }
            System.err.println(sb.toString());
            pass;
        }

        /**

            Check and see if a message arrives for an actor that hasn't made it here yet.

        */


        if (o instanceof RemoteActor) {
//            System.err.println("RECEIVED A REMOTE ACTOR WITH HASHCODE: " + o.hashCode());

        } else if (o instanceof Actor) {
            Actor actor = (Actor)o;

            //System.err.println("RECEIVED A NON-MOBILE ACTOR WITH HASHCODE: " + actor.hashCode());

            synchronized (MobileActorRegistry.getStateLock(actor.hashCode())) {
                MobileActorRegistry.updateStateEntry(actor.hashCode(), actor);
            }

        } else if (o instanceof Message) {
            //check to see if the target actor is here

            /*
            if (message.target instanceof MobileActor) {

                if (awaitingMobileUpdateAck.get(message.target.hashCode()) == null) {
                    synchronized (MobileActorRegistry.getStateLock(message.target.hashCode())) {
                        if (MobileActorRegistry.get(message.target.hashCode()) instanceof OutgoingTheaterConnection) {
                            //received a message to a mobile actor who was not here, the source
                            //theater of this message needs to update it's reference to where this
                            //theater knows the actor's location is

                            awaitingMobileUpdateAck.put(message.target.hashcode(), new Object());

                            source<-updateMobileActorLocation(message.target) @
                            self<-updateMobileActorAcknowledgement(message.target);
                        }
                    }
                }
            }
            */

            StageService.sendMessage((Message)o);

//            System.err.println("IncomingTheaterConnection received a message: " + o);

        } else {
            StringBuffer sb = new StringBuffer();
            sb.append("Error in IncomingTheaterConnection, received unknown object: " + o + "\n");
            sb.append("\tlocal host [" + socket.getLocalSocketAddress() + "], local port [" + socket.getLocalPort() + "]\n");
            sb.append("\tremote host address [" + socket.getInetAddress().getHostAddress() + "], remote host name [" + socket.getInetAddress().getHostName() + "], remote port [" + socket.getPort() + "]\n");
            System.err.println(sb.toString());
            pass;
        }

        self<-listen();
    }

    /*
    ack updateMobileActorAcknowledgement(Actor a) {
        awaitingMobileUpdateAck.remove(a.hashCode());
    }
    */
}
