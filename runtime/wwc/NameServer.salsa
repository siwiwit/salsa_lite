module salsa_lite.runtime.wwc;

import object java.util.HashMap;

behavior NameServer extends RemoteActor {

    HashMap<String,MobileActor> entries = new HashMap<String,MobileActor>();

    NameServer() {
        System.err.println("NameServer running at host[" + TransportService.getHost() + "], port[" + TransportService.getPort() + "], name[" + System.getProperty("called") + "], hashCode: " + self.hashCode());
    }

    NameServer(String[] arguments) {
        if (System.getProperty("called") == null) {
            System.err.println("Error starting NameServer: must specify a name with the '-Dcalled=<name>' system property.");
            System.err.println("usage: (port is optional and 4040 by default)");
            System.err.println("\tjava -Dcalled=mynameserver [-Dport=4040] salsa_lite.runtime.wwc.NameServer");
            System.exit(0);
        }

        System.err.println("NameServer running at host[" + TransportService.getHost() + "], port[" + TransportService.getPort() + "], name[" + System.getProperty("called") + "], hashCode: " + self.hashCode());
    }

    ack put(MobileActor actor) {
        String name = actor.getName();
        if (!entries.containsKey(name)) {
            entries.put(name, actor);
            System.err.println("[nameserver: " + self.getName() + "] PUT " + name + " -- " + actor);
        } else {
            MobileActor entry = entries.get(name);
            System.err.println("Error: trying to put an actor on the NameServer when it already exists.");
            System.err.println("\texisting  entry name[" + name + "], host[" + entry.getLastKnownHost() + "], port[" + entry.getLastKnownPort() + "]");
            System.err.println("\tattempted entry name[" + name + "], host[" + actor.getLastKnownHost() + "], port[" + actor.getLastKnownPort() + "]");
        }
    }

    ack update(MobileActor actor) {
        String name = actor.getName();
        if (entries.containsKey(name)) {
            entries.put(name, actor);
            System.err.println("[nameserver: " + self.getName() + "] UPDATE " + name + " -- " + actor);
        } else {
            MobileActor entry = entries.get(name);
            System.err.println("Error: trying to update an actor on the NameServer when it does not exist.");
            System.err.println("\tattempted entry name[" + name + "], host[" + actor.getLastKnownHost() + "], port[" + actor.getLastKnownPort() + "]");
        }
    }

    MobileActor get(String name) {
        if (entries.containsKey(name)) {
            MobileActor entry = entries.get(name);
            System.err.println("[nameserver: " + self.getName() + "] GET " + name + " -- " + entry);
            pass entry;
        } else {
            System.err.println("Error: trying to get an actor on the NameServer when it does not exist.");
            System.err.println("\tname[" + name + "]");
            pass null;
        }
    }

    MobileActor remove(String name) {
        if (entries.containsKey(name)) {
            MobileActor entry = entries.remove(name);
            System.err.println("[nameserver: " + self.getName() + "] REMOVE " + name + " -- " + entry);
            pass entry;
        } else {
            System.err.println("Error: trying to remove an actor on the NameServer when it does not exist.");
            System.err.println("\tname[" + name + "]");
            pass null;
        }
     }

}
