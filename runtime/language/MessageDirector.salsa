module salsa_lite.runtime.language;

import object salsa_lite.common.NullObject;

behavior MessageDirector extends SynchronizationDirector {
	Message message;
	int required_tokens;

    /**
     *  This constructor is used if the message only waits for a continuation, i.e.:
     *      a<-m() @
     *      b<-m();    // this type of message
     */
	MessageDirector(Message message, ContinuationDirector input_continuation) {
        self.message = message;
        self.required_tokens = 1;

        //a position of -2 specifies that the token is only being used for synchronization (as a continuation/waitfor)
        input_continuation<-setMessage( new Message(Message.SIMPLE_MESSAGE, self, 2 /*resolve*/, new Object[]{-2, null}) );
	}

    MessageDirector(Message message, Director[] input_continuations) {
        self.message = message;
        self.required_tokens = input_continuations.length;

        for (int i = 0; i < input_continuations.length; i++) {
            if (input_continuations[i] instanceof ValueDirector) {
                ((ValueDirector)input_continuations[i])<-addDirector(self, -2);
            } else {
                ((ContinuationDirector)input_continuations[i])<-setMessage( new Message(Message.SIMPLE_MESSAGE, self, 2 /*setValue*/, new Object[]{-2, null}) );
            }
        }
    }

    MessageDirector(Message message, Object[] arguments, int[] token_positions, ContinuationDirector input_continuation) {
        self.message = message;
        self.required_tokens = token_positions.length + 1;

        input_continuation<-setMessage( new Message(Message.SIMPLE_MESSAGE, self, 2 /*setValue*/, new Object[]{-2, null}) );

        for (int i = 0; i < token_positions.length; i++) {
            ((ValueDirector)arguments[token_positions[i]])<-addDirector(self, token_positions[i]);
        }
    }

    MessageDirector(Message message, Object[] arguments, int[] token_positions) {
        self.message = message;
        self.required_tokens = token_positions.length;

        for (int i = 0; i < token_positions.length; i++) {
            ((ValueDirector)arguments[token_positions[i]])<-addDirector(self, token_positions[i]);
        }
    }

    MessageDirector(Message message, Object[] arguments, int[] token_positions, Director[] input_continuations) {
        self.message = message;
        self.required_tokens = token_positions.length + input_continuations.length;

        for (int i = 0; i < token_positions.length; i++) {
            ((ValueDirector)arguments[token_positions[i]])<-addDirector(self, token_positions[i]);
        }

        for (int i = 0; i < input_continuations.length; i++) {
            if (input_continuations[i] instanceof ValueDirector) {
                ((ValueDirector)input_continuations[i])<-addDirector(self, -2);
            } else {
                ((ContinuationDirector)input_continuations[i])<-setMessage( new Message(Message.SIMPLE_MESSAGE, self, 2 /*setValue*/, new Object[]{-2, null}) );
            }
        }
    }

    /**
     *  This constructor is used if the target of the message is a token.
     */
    MessageDirector(Message message, ValueDirector message_target) {
        self.message = message;
        self.required_tokens = 1;

        System.out.println("made a message director with just a value director: " + message_target);

        //a position of -1 specifies that the token will fill in the message target
        message_target<-addDirector(self, -1);
    }

    /**
     *  This constructor is used if the message only waits a continuation and the message target is also a token, i.e.:
     *      token Actor b = c<-m();
     *      a<-m() @
     *      b<-m();    // this type of message
     */
	MessageDirector(Message message, ContinuationDirector input_continuation, ValueDirector message_target) {
        self.message = message;
        self.required_tokens = 2;

        System.out.println("made a message director with an input continuation: " + input_continuation + " and a value director: " + message_target);

        //a position of -1 specifies that the token will fill in the message target
        message_target<-addDirector(self, -1);
        //a position of -2 specifies that the token is only being used for synchronization (as a continuation/waitfor)
        input_continuation<-setMessage( new Message(Message.SIMPLE_MESSAGE, self, 2 /*resolve*/, new Object[]{-2, null}) );
	}

    /**
     *  This constructor is used if there are multiple continuations to wait for (with the waitfor message property) and the message target is also a token, i.e.:
     *      token Actor b = c<-m();
     *      a<-m() @
     *      b<-m() : waitfor(d<-m());    // this type of message
     */
    MessageDirector(Message message, Director[] input_continuations, ValueDirector message_target) {
        self.message = message;
        self.required_tokens = input_continuations.length + 1;

        message_target<-addDirector(self, -1);

        for (int i = 0; i < input_continuations.length; i++) {
            if (input_continuations[i] instanceof ValueDirector) {
                ((ValueDirector)input_continuations[i])<-addDirector(self, -2);
            } else {
                ((ContinuationDirector)input_continuations[i])<-setMessage( new Message(Message.SIMPLE_MESSAGE, self, 2 /*setValue*/, new Object[]{-2, null}) );
            }
        }
    }

    /**
     *  This constructor is used if there are tokens within the message arguments, the message is waiting for a continuation, and the message target
     *  is also a token, i.e.:
     *      token Actor b = c<-m();
     *      a<-m() @
     *      b<-m( d<-m(), e<-m() );
     */
    MessageDirector(Message message, Object[] arguments, int[] token_positions, ContinuationDirector input_continuation, ValueDirector message_target) {
        self.message = message;
        self.required_tokens = token_positions.length + 2;

        message_target<-addDirector(self, -1);
        input_continuation<-setMessage( new Message(Message.SIMPLE_MESSAGE, self, 2 /*setValue*/, new Object[]{-2, null}) );

        for (int i = 0; i < token_positions.length; i++) {
            ((ValueDirector)arguments[token_positions[i]])<-addDirector(self, token_positions[i]);
        }
    }

    /**
     *  This constructor is used if there are tokens within the message arguments and the message target
     *  is also a token, i.e.:
     *      token Actor b = c<-m();
     *      b<-m( d<-m(), e<-m() );
     */
    MessageDirector(Message message, Object[] arguments, int[] token_positions, ValueDirector message_target) {
        self.message = message;
        self.required_tokens = token_positions.length + 1;

        message_target<-addDirector(self, -1);

        for (int i = 0; i < token_positions.length; i++) {
            ((ValueDirector)arguments[token_positions[i]])<-addDirector(self, token_positions[i]);
        }
    }

    /**
     *  This constructor is used if there are tokens within the message arguments, the message is waiting for a continuation, and the message target
     *  is also a token, i.e.:
     *      token Actor b = c<-m();
     *      a<-m() @
     *      b<-m( d<-m(), e<-m() ) : waitfor(f<-m(), g<-m());
     */
    MessageDirector(Message message, Object[] arguments, int[] token_positions, Director[] input_continuations, ValueDirector message_target) {
        self.message = message;
        self.required_tokens = token_positions.length + input_continuations.length + 1;

        message_target<-addDirector(self, -1);

        for (int i = 0; i < token_positions.length; i++) {
            ((ValueDirector)arguments[token_positions[i]])<-addDirector(self, token_positions[i]);
        }

        for (int i = 0; i < input_continuations.length; i++) {
            if (input_continuations[i] instanceof ValueDirector) {
                ((ValueDirector)input_continuations[i])<-addDirector(self, -2);
            } else {
                ((ContinuationDirector)input_continuations[i])<-setMessage( new Message(Message.SIMPLE_MESSAGE, self, 2 /*setValue*/, new Object[]{-2, null}) );
            }
        }
    }

	ack setValue(int position, Object value) {
        if (position >= 0) {
            message.arguments[position] = value;
        } else if (position == -1) {
            message.target = (Actor)value;
        }

		required_tokens--;

		if (required_tokens <= 0) StageService.sendMessage(message);
	}
}
