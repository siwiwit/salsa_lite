import salsa_lite.runtime.wwc.NameServer;
import salsa_lite.runtime.io.StandardOutput;
import salsa_lite.language.JoinDirector;

import object java.io.BufferedReader;
import object java.io.FileReader;
import object java.util.StringTokenizer;
import object java.util.ArrayList;

behavior MigrationTester extends RemoteActor {
	ArrayList<String> hosts = new ArrayList<String>();
	ArrayList<Integer> ports = new ArrayList<Integer>();
	NameServer nameserver;

	MigrationWorker[] workers;

	MigrationTester(String[] args) {
		if (args.length != 3) {
			System.err.println("Incorrect arguments.");
			System.err.println("Usage:");
			System.err.println("\tjava MigrationTester <theaters file> <number_workers> <number_migrations>");
			System.exit(0);
		}

		int number_workers = Integer.parseInt(args[1]);
		int number_migrations = Integer.parseInt(args[2]);

        nameserver = new NameServer() called ("nameserver");

		self<-getTheaters(args[0]) @
		self<-create_actors(number_workers) @
		self<-migrate_actors(number_migrations) @
		new StandardOutput()<-println("Migration test with " + number_workers + " actors and " + number_migrations + " completed.") @
        self<-finish();
	}

    ack finish() {
        System.exit(0);
    }

	ack getTheaters(String theater_file) {
		try {   
			BufferedReader in = new BufferedReader(new FileReader(theater_file));
			String line;

			while ((line = in.readLine()) != null) {
                StringTokenizer st = new StringTokenizer(line, ":");

				hosts.add(st.nextToken());
                ports.add(Integer.parseInt(st.nextToken()));
			}
		} catch (Exception e) {
			System.err.println("Error reading theaters file: " + e);
			e.printStackTrace();
            System.exit(0);
		}       
	}        

	ack create_actors(int number_workers) {
		workers = new MigrationWorker[number_workers];

        JoinDirector jd = new JoinDirector();
		for (int i = 0; i < number_workers; i++) {
			int target = (int)(hosts.size() * Math.random());

            token MigrationWorker w = new MigrationWorker() called ("worker_" + i) using (nameserver) at (hosts.get(target), ports.get(target));
            self<-set_worker( i, w ) @
            jd<-join();
		}
        jd<-resolveAfter(number_workers) @
        pass;
	}

    ack set_worker(int i, MigrationWorker migration_worker) {
        workers[i] = migration_worker;
    }

	ack migrate_actors(int number_migrations) {
        JoinDirector jd = new JoinDirector();
        for (int i = 0; i < number_migrations; i++) {
            int target = (int)(hosts.size() * Math.random());

            workers[ (int)(workers.length * Math.random()) ]<-migrate(hosts.get(target), ports.get(target)) @ jd<-join();
        }

        jd<-resolveAfter(number_migrations) @
		pass;
	}
}
