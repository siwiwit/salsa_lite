behavior MeetingPlace {
	boolean did_evens = false;
	int max_meetings;
	int meetings;
 
	Chameneos[] chameneoses;
	Chameneos first = null;
	Colour first_colour;

	MeetingPlace(String[] arguments) {
        if (arguments.length != 1) {
            System.err.println("Error running Chameneos Redux example, invalid arguments.");
            System.err.println("Usage:");
            System.err.println("\tjava salsa_lite.examples.chameneos.MeetingPlace <number of meetings>");

            System.exit(1);
        }

		max_meetings = Integer.parseInt(arguments[0]);
		meetings = max_meetings;

		self<-printCompliments() @
		self<-odds();
	}

	String[] numbers = new String[]{ "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };

	ack spell(int value) {
        String s = Integer.toString(value);

        for (int i = 0; i < s.length(); i++ ) {
            System.out.print(" " + numbers[Character.getNumericValue( s.charAt(i) )]);
        }
        System.out.println();
	}

	ack printCompliments() {
		self.printCompliment(Colour.blue, Colour.blue);
		self.printCompliment(Colour.blue, Colour.red);
		self.printCompliment(Colour.blue, Colour.yellow);
		self.printCompliment(Colour.red, Colour.blue);
		self.printCompliment(Colour.red, Colour.red);
		self.printCompliment(Colour.red, Colour.yellow);
		self.printCompliment(Colour.yellow, Colour.blue);
		self.printCompliment(Colour.yellow, Colour.red);
		self.printCompliment(Colour.yellow, Colour.yellow);
	}

	ack printCompliment(Colour c1, Colour c2) {
        System.out.println(c1 + " + " + c2 + " -> " + self.doCompliment(c1, c2));
	}

	Colour doCompliment(Colour c1, Colour c2) {
		switch (c1) {
			case blue:
				switch (c2) {
					case blue:      pass Colour.blue;
					case red:       pass Colour.yellow;
					case yellow:    pass Colour.red;
				}
			case red:
				switch (c2) {
					case blue:      pass Colour.yellow;
					case red:       pass Colour.red;
					case yellow:    pass Colour.blue;
				}
			case yellow:
				switch (c2) {
					case blue:      pass Colour.red;
					case red:       pass Colour.blue;
					case yellow:    pass Colour.yellow;
				}
		}
		System.out.println("Cannot do compliment for unknown colours: " + c1 + ", " + c2);
		System.exit(0);
		pass c1;
	}

	ack odds() {
		System.out.println("\nblue red yellow");

		chameneoses = new Chameneos[3];
		chameneoses[0] = new Chameneos(Colour.blue, self);
		chameneoses[1] = new Chameneos(Colour.red, self);
		chameneoses[2] = new Chameneos(Colour.yellow, self);
	}

	ack evens() {
		meetings = max_meetings;
		first = null;

		System.out.println("\nblue red yellow red yellow blue red yellow red blue");
		chameneoses = new Chameneos[10];
		chameneoses[0] = new Chameneos(Colour.blue, self);
		chameneoses[1] = new Chameneos(Colour.red, self);
		chameneoses[2] = new Chameneos(Colour.yellow, self);
		chameneoses[3] = new Chameneos(Colour.red, self);
		chameneoses[4] = new Chameneos(Colour.yellow, self);
		chameneoses[5] = new Chameneos(Colour.blue, self);
		chameneoses[6] = new Chameneos(Colour.red, self);
		chameneoses[7] = new Chameneos(Colour.yellow, self);
		chameneoses[8] = new Chameneos(Colour.red, self);
		chameneoses[9] = new Chameneos(Colour.blue, self);
	}

	ack meet(Chameneos chameneos, Colour colour) {
		if (meetings == 0) pass;

		if (first == null) {
			first = chameneos;
			first_colour = colour;
		} else {
			if (first == chameneos) {
				first<-left_self( self.doCompliment(first_colour, colour) );
				chameneos<-left_self( self.doCompliment(first_colour, colour) );
				first = null;
			} else {
				first<-left_other( self.doCompliment(first_colour, colour) );
				chameneos<-left_other( self.doCompliment(first_colour, colour) );
				first = null;
			}
			meetings--;
            if (meetings == 0) self<-finished();
		}
	}

	ack finished() {
		if (!did_evens) {
			did_evens = true;

            token ack ta = ack;
            for (int i = 0; i < chameneoses.length; i++) {
                ta = chameneoses[i]<-output_meetings() : waitfor(ta);
            }
            self<-spell(max_meetings * 2) : waitfor(ta) @
            self<-evens();
        } else {

            token ack ta = ack;
            for (int i = 0; i < chameneoses.length; i++) {
                ta = chameneoses[i]<-output_meetings() : waitfor(ta);
            }
			self<-spell(max_meetings * 2) : waitfor(ta) @
			self<-end();
        }
	}

	ack end() {
		System.exit(0);
	}
}
